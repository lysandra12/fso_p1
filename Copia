#! /bin/bash

copy_dir()
{
	file=$1
	tar_file=$2
	if [ -f "$file" ]
	then
		echo "File is $file"
		found=0
		for j in $files_inside
		do
			if [ "$j" == "$file" ]
			then
				found=1
			fi
		done
		if [ $found -eq 1 ]
		then
			date=$(date +"%y%m%d")
			name="$file"."$date"
			mv "$file" "$name"
			tar -uf $tar_file $name &> /dev/null
			mv "$name" "$file"
		else
			tar -uf $tar_file $file &> /dev/null
		fi
	elif [ -d "$file" ]
	then
		echo "Directory is $file"
		for entry in "${file}"/*
		do
			copy_dir $entry $tar_file
		done
	fi
}

#Copia [-K] [-D] fitxer1 fitxer2 ... fitxer_tgz

#Limit cases:
#1: -D and -K are valid names but cannot be the first ones,
# as they will get interpreted as flags.
#2: last file should always be *.tgz or *.tar.gz

# Error when no arguments
if [ $# -eq 0 ]
then
	echo "Error: Enter arguments."
	exit 1
fi

# Error when "./Copia -K" or when "./Copia -K -D"
date=0
dry_run=0
n=0
if [ $1 = "-K" ]
then
	if [ $# -eq 1 ]
	then
		echo "Error: Flag without files."
		exit 1
	else
		if [ $2 = "-D" ]
		then
			if [ $# -eq 2 ]
			then
				echo "Error: Flags without files."
				exit 1
			fi
			let "n++"
			dry_run=1
		fi
	fi
	let "n++"
	date=1
fi

# Error when "./Copia -D" or when "./Copia -D -K"
if [ $1 = "-D" ]
then
	if [ $# -eq 1 ]
	then
		echo "Error: Flag without files."
		exit 1
	else
		if [ $2 = "-K" ]
		then
			if [ $# -eq 2 ]
			then
				echo "Error: Flags without files."
				exit 1
			fi
			let "n++"
			date=1
		fi
	fi
	let "n++"
	dry_run=1
fi

# Error if last argument does not end with *.tgz or *.tar.gz
for i in "$@"; do :; done

if [[ "$i" != *.tgz ]]
then
	if [[ "$i" != *tar.gz ]]
	then
		echo "Error: Last file should have the extension .tgz or .tar.gz"
		exit 1
	fi
fi

# We set the last argument to tar_file
tar_file=$i

# Here check if there are files to make a copy
let n_files=$#-$n
if [ $n_files -eq 1 ]
then
	echo "Error: No files to make a copy."
	exit 1
fi

# We shift left n arguments (remove the flags we had).
shift $n

# Get all the arguments except the last one.
files_to_store=${@:1:$((${#}-1))}

# If the .tgz or .tar.gz already exists and we need to add files to it,
# or if we will create a new .tgz or .tar.gz
create_tar=0
files_inside=
if [ ! -f $tar_file ]
then
	create_tar=1
else
	# Is the tar_file really valid?
	tar -tf "$tar_file" &> /dev/null
	if [ $? -eq 0 ]
	then
		files_inside=$(tar -tf $tar_file)
	else
		echo "Error: The existing tar file is not valid! Stopping the process to prevent potential data lose."
		exit 2
	fi
fi

abs_path=$(pwd)

# Get the files inside the tar

if [ $dry_run -eq 1 ]
then
	if [ $create_tar -eq 1 ]
	then
		echo "Creating $tar_file."
		for i in $files_to_store
		do
			if [ -e "$i" ]
			then
				if [[ "$i" == $abs_path* ]]
				then
					file=${i#"${abs_path}/"}
					echo "Absolute path detected. Compressed from '${i}' to '${file}'."
				else
					file=$i
				fi
				if [ -f "$file" ]
				then
					echo "->File '${file}' exists. Adding it to '${tar_file}'."
				elif [ -d "$file" ]
				then
					echo "->Directory '${file}' exists. Adding it to '${tar_file}'."
				else
					echo "->Error, '${file}' is neither file nor directory."
				fi
			else
				echo "->Error, '${file}' does not exist."
			fi
		done
	else
		echo "$tar_file already exists."
		for i in $files_to_store
		do
			if [ -e "$i" ]
			then
				if [[ "$i" == $abs_path* ]]
				then
					file=${i#"$abs_path/"}
				else
					file=$i
				fi
				if [ $date -eq 1 ]
				then
					found=0
					for j in $files_inside
					do
						if [ "$j" == "$file" ]
						then
							found=1
						fi
					done
					if [ $found -eq 1 ]
					then
						date=$(date +"%y%m%d")
						echo "->File '${file}' already exists inside '${tar_file}'. Adding it as '${file}.${date}'."
					else
						echo "->File '${file}' does not exist inside '${tar_file}'. Adding it."
					fi
				else
					if [ -f "$file" ]
					then
						echo "->File '${file}' exists. Adding it to '${tar_file}'."
					elif [ -d "$file" ]
					then
						echo "->Directory '${file}' exists. Adding it to '${tar_file}'."
					else
						echo "->Error, '${file}' is neither file nor directory."
					fi
				fi
			else
				echo "->Error, '${file}' does not exist."
			fi
		done
	fi
else
	if [ $create_tar -eq 1 ]
	then
		touch $tar_file
		for i in $files_to_store
		do
			if [ -e "$i" ]
			then
				if [[ "$i" == $abs_path* ]]
				then
					file=${i#"$abs_path/"}
				else
					file=$i
				fi
				tar -uf $tar_file $file &> /dev/null
			fi
		done
		echo "->'$tar_file' created."
	else
		for i in $files_to_store
		do
			if [ -e "$i" ]
			then
				if [[ "$i" == $abs_path* ]]
				then
					file=${i#"$abs_path/"}
				else
					file=$i
				fi
				if [ $date -eq 1 ]
				then
					if [ -d "$file" ]
					then
						dir=${file::-1}
						copy_dir $dir $tar_file
					else
						copy_dir $file $tar_file
					fi
				else
					if [ -f "$file" ]
					then
						tar -uf $tar_file $file &> /dev/null
					elif [ -d "$file" ]
					then
						tar -uf $tar_file $file &> /dev/null
					fi
				fi
			fi
		done
	fi
fi
